Today's Agenda
------------------
9.00AM  to 9.15AM   - Quiz
9.15AM  to 10.00AM  - Parallel Execution 
10.00AM to 10.15AM  - classroom
10.15AM to 10.30AM  - Break
10.30AM to 11.30AM  - Cucumber Integration
11.30AM to 11.50AM  - Classroom
11.50PM to 12.00PM  - Break
12.00PM to 12.40PM  - Pom with Properties files
12.40PM to 1.00PM   - ConfigurationManager

Constructor:
----------
->Special Method -->holds the name same as classname
->create Object -->constructor -->initializes the object 

Classname obj=new Classname();

Constructor -->like a normal method in java
            -->name as the classname
			-->doesnot return anything
			
calling the constructor 
normal method
			
			
			
			
			
default Constructor
Parametrized Constructor

 -->to resolve the ambiguity between the global variable and local variable
 
 
 Classroom -Parallel Execution
 ------------------------------
 Remove the static keyword from the driver declaration in ProjectSpecificMethod
 Create Parametrized Construtor (RemoteWebDriver driver) in all the pages respective to the classes
 use this.driver=driver ;
 pass the driver as argument whereever the constructor is returned in pages and alos in testcase
 
 Constructor chaining
 --------------------
 Calling one Constructor into other Constructor

Challenges:
-----------
Cucumber -->static driver
If static driver -->Parrall is not possible -->Parametrized Constructor
Parametrized Constructor -->cucumber is not supported



Oops ->Encapsulation 
--------------------
Binding the data and the methods together -->data Security
getter and setter 

Thread -->driver static

ThreadLocal -->java--> to make the thread specific to the exe



Add the following line of codes in Project Specificmethod

private static final ThreadLocal<RemoteWebDriver> tlDriver = new ThreadLocal<RemoteWebDriver>();

	public static ThreadLocal<RemoteWebDriver> getTldriver() {
		return tlDriver;
	}

	public RemoteWebDriver getDriver() {
		return tlDriver.get();
	}

	public void setDriver() {
		tlDriver.set(new ChromeDriver());
	}
	
Remove the ChromeDriver declaration and Instance created in the preCondition method
Call the setDriver()
replace the driver with getDriver() in all the java classes
Remove the constructor call in all page classes

Properties files
src/main/reources -->create the file with .properties
 create key and values to define the data
1.Set up the path for the properties files  using FileInputStream  classes
2.Instantiate the Properties class
3.using Properties obj load the input file into properties class -to read the data from the properties file
4. prop.getProperty("key")








